@page "/"
@using VismaTechnicalTask.Services
@using VismaTechnicalTask.Models
@using VismaTechnicalTask.HelperFunctions
@using Microsoft.AspNetCore.SignalR.Client
@using System.Threading
@using FileInfo = System.IO.FileInfo

@inject IHelperInfoService IHelperInfoService
@inject IAppRecService IAppRecService
@inject IErrorReasonService IErrorReasonService
@inject IReceiverService IReceiverService
@inject ISenderService ISenderService
@inject NavigationManager NavManager
@inject NotificationService NotificationService

<div class="info-container">
    <h4>Information about project</h4>
    <p>This project is for XML file reading, parsing and saving to database. 
        XML files are mail delivery receipts.
    </p>
    <ul>
        <li>
            <NavLink href="success-fail-ratio">Success/fail stats</NavLink> - monthly Success/Fail ratio for Sender
        </li>
        <li>
            <NavLink href="failed-msg-overview">Overview</NavLink> - failed message overview for period
        </li>
        <li>
            <NavLink href="negative-delivery-periods">Negative deliveries</NavLink> - periods of negative delivery receipts received in row

        </li>
    </ul>
</div>

<div class="xml-add-container">
    <p>By clicking on button below, you can update database with all XML receipts, which were created after <span class="bold-accent">@helperInfo.LastAddedXmlDate</span></p>
    <button class="custom-btn" @onclick="() => AddXmls()">XML to DB</button>
</div>

@* @if (parsingResult != "") *@
@* { *@
@*     @if (parsingResult.Contains("successfully")) *@
@*     { *@
@*         <div class="alert alert-success" role="alert">@parsingResult</div> *@
@*     } *@
@*     else *@
@*     { *@
@*         <div class="alert alert-danger" role="alert">@parsingResult</div> *@
@*     } *@
@* } *@

@code {
    private HubConnection hubConnection;

    HelperInfo helperInfo = new HelperInfo();
    String parsingResult = "";

    bool notifTimeout = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            helperInfo = await IHelperInfoService.GetLastAddedXmlDate();
        }
        catch
        {
            await IHelperInfoService.UpdateLastAddedXmlDate(new HelperInfo()
            { LastAddedXmlDate = new DateTime(1900, 1, 1)});
            helperInfo = await IHelperInfoService.GetLastAddedXmlDate();
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/parsing-res-hub"))
            .Build();

        hubConnection.On<String>("ReceiveParsingRes", (parsingResult) =>
        {
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public async void AddXmls() {
        XmlParsing xmlParsing = new XmlParsing(IAppRecService, IErrorReasonService, ISenderService, IReceiverService,IHelperInfoService);

        parsingResult = await xmlParsing.ReadFiles(helperInfo.LastAddedXmlDate);
        await hubConnection.SendAsync("SendXmlParsingResult", parsingResult);

        if (parsingResult.Contains("successfully"))
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = parsingResult, Duration = 10000 });
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = parsingResult, Duration = 10000 });
        }

        helperInfo = await IHelperInfoService.GetLastAddedXmlDate();
        await hubConnection.SendAsync("SendXmlLastAddedDate", helperInfo);

        //NavManager.NavigateTo("/", forceLoad: true);
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}